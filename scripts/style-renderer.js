/**
 * Style Renderer
 * Lightly adjusts text tone based on emotion without altering facts
 * Minimal and reversible transformations only
 */

export function renderWithStyle(text, { emotionId }) {
    if (!text || typeof text !== 'string') {
        return text;
    }

    // Normalize multiple periods to single
    let styledText = text.replace(/„ÄÇ{2,}/g, '„ÄÇ').replace(/\.{3,}/g, '...');
    
    // Track modifications to limit to 2 per response
    let modificationCount = 0;
    const maxModifications = 2;

    // Helper to check if we can still modify
    const canModify = () => modificationCount < maxModifications;

    // Helper to count emojis in text
    const countEmojis = (str) => {
        const emojiPattern = /[\u{1F300}-\u{1F9FF}]|[\u{2600}-\u{27BF}]|[\u{1F680}-\u{1F6FF}]/gu;
        return (str.match(emojiPattern) || []).length;
    };

    // Get current emoji count
    let currentEmojiCount = countEmojis(styledText);
    const maxEmojis = 2;

    switch (emotionId) {
        case 'happy':
        case 'excited':
            // Add excitement to ending if not already there
            if (canModify() && !styledText.match(/[ÔºÅ!‚ú®üéâ]+$/)) {
                // Change ending punctuation to exclamation
                if (styledText.match(/[„ÄÇÔºé]$/)) {
                    styledText = styledText.replace(/[„ÄÇÔºé]$/, 'ÔºÅ');
                    modificationCount++;
                }
                // Add sparkle if room for emoji
                if (canModify() && currentEmojiCount < maxEmojis && !styledText.includes('‚ú®')) {
                    styledText = styledText.replace(/([ÔºÅ!„ÄÇ])$/, '$1‚ú®');
                    currentEmojiCount++;
                    modificationCount++;
                }
            }
            // Add casual ending if appropriate
            if (canModify() && styledText.match(/„Åß„Åô[„ÄÇÔºÅ]?$/)) {
                styledText = styledText.replace(/„Åß„Åô([„ÄÇÔºÅ]?)$/, '„Å†„Çà$1');
                modificationCount++;
            }
            break;

        case 'grateful':
            // Add thank you if not already present
            if (canModify() && !styledText.match(/„ÅÇ„Çä„Åå„Å®|ÊÑüË¨ù|„ÅäÁ§º/)) {
                // Only add if it makes sense contextually
                if (styledText.match(/^(„ÅØ„ÅÑ|ÂàÜ„Åã„Çä„Åæ„Åó„Åü|‰∫ÜËß£|ÊâøÁü•)/)) {
                    styledText += ' „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ';
                    modificationCount++;
                }
            }
            // Add heart emoji if appropriate and room
            if (canModify() && currentEmojiCount < maxEmojis && 
                styledText.match(/„ÅÇ„Çä„Åå„Å®/) && !styledText.match(/[üíï‚ù§Ô∏èüôè]/)) {
                styledText = styledText.replace(/([ÔºÅ!„ÄÇ])$/, '$1üíï');
                currentEmojiCount++;
                modificationCount++;
            }
            break;

        case 'thinking':
            // Add thinking prefix if not present
            if (canModify() && !styledText.match(/^(„ÅÜ„Éº„Çì|„Åù„ÅÜ„Åß„Åô„Å≠|„Åà„Éº„Å®|„Å°„Çá„Å£„Å®)/)) {
                // Check if it's a question or contemplative response
                if (styledText.match(/„Åã„Å™[Ôºü?„ÄÇ]|„Åß„Åó„Çá„ÅÜ|ÊÄù„ÅÑ„Åæ„Åô/)) {
                    styledText = '„ÅÜ„Éº„Çì„ÄÅ' + styledText;
                    modificationCount++;
                }
            }
            // Add ellipsis for contemplation
            if (canModify() && styledText.match(/[„ÄÇ]$/) && styledText.length < 50) {
                styledText = styledText.replace(/„ÄÇ$/, '...');
                modificationCount++;
            }
            break;

        case 'confused':
            // Add confusion marker
            if (canModify() && !styledText.match(/[Ôºü?]/)) {
                if (styledText.match(/[„ÄÇÔºé]$/)) {
                    styledText = styledText.replace(/[„ÄÇÔºé]$/, '...Ôºü');
                    modificationCount++;
                }
            }
            break;

        case 'sad':
        case 'worried':
        case 'apologetic':
            // Add apology if contextually appropriate
            if (emotionId === 'apologetic' && canModify() && 
                !styledText.match(/„Åî„ÇÅ„Çì|„Åô„Åø„Åæ„Åõ„Çì|Áî≥„ÅóË®≥/)) {
                // Only for error or negative responses
                if (styledText.match(/„Åß„Åç„Åæ„Åõ„Çì|„ÅÇ„Çä„Åæ„Åõ„Çì|„Çè„Åã„Çä„Åæ„Åõ„Çì/)) {
                    styledText = '„Åî„ÇÅ„Çì„Å≠„ÄÅ' + styledText;
                    modificationCount++;
                }
            }
            // Add sweat emoji sparingly
            if (canModify() && currentEmojiCount < maxEmojis && 
                styledText.match(/Áî≥„ÅóË®≥|„Åî„ÇÅ„Çì/) && !styledText.includes('üí¶')) {
                styledText = styledText.replace(/([„ÄÇÔºÅ])$/, 'üí¶$1');
                currentEmojiCount++;
                modificationCount++;
            }
            break;

        case 'wink':
        case 'playful':
            // Add playful tone
            if (canModify() && currentEmojiCount < maxEmojis && !styledText.match(/[üòâüòú]/)) {
                if (styledText.match(/[ÔºÅ!„ÄÇ]$/)) {
                    styledText = styledText.replace(/([ÔºÅ!„ÄÇ])$/, 'üòâ$1');
                    currentEmojiCount++;
                    modificationCount++;
                }
            }
            break;

        case 'sleepy':
            // Add sleepy marker
            if (canModify() && !styledText.match(/Áú†|„Å≠„ÇÄ|„Åä„ÇÑ„Åô„Åø/)) {
                if (styledText.match(/„ÄÇ$/)) {
                    styledText = styledText.replace(/„ÄÇ$/, '...üí§');
                    currentEmojiCount++;
                    modificationCount++;
                }
            }
            break;

        case 'motivated':
            // Add motivational ending
            if (canModify() && styledText.match(/È†ëÂºµ|„Åå„Çì„Å∞|„ÇÑ„Çä„Åæ„Åó„Çá„ÅÜ/)) {
                if (!styledText.match(/[ÔºÅ!]/)) {
                    styledText = styledText.replace(/[„ÄÇ]$/, 'ÔºÅ');
                    modificationCount++;
                }
            }
            break;

        case 'neutral':
        default:
            // No transformation for neutral or unknown emotions
            break;
    }

    // Final cleanup - ensure we don't have duplicate punctuation
    styledText = styledText.replace(/([ÔºÅ!]){2,}/g, '$1');
    styledText = styledText.replace(/([„ÄÇ]){2,}/g, '$1');
    
    // Ensure emoji count doesn't exceed limit (defensive)
    const finalEmojiCount = countEmojis(styledText);
    if (finalEmojiCount > maxEmojis) {
        // Remove excess emojis from the end
        const emojiPattern = /[\u{1F300}-\u{1F9FF}]|[\u{2600}-\u{27BF}]|[\u{1F680}-\u{1F6FF}]/gu;
        let emojiMatches = [...styledText.matchAll(emojiPattern)];
        while (emojiMatches.length > maxEmojis) {
            const lastEmoji = emojiMatches.pop();
            styledText = styledText.substring(0, lastEmoji.index) + 
                       styledText.substring(lastEmoji.index + lastEmoji[0].length);
        }
    }

    return styledText;
}

// Export for browser usage
if (typeof window !== 'undefined') {
    window.renderWithStyle = renderWithStyle;
}